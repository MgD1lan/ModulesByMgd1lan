from hikkatl.types import Message
from hikkatl.utils import get_password
from .. import loader, utils
from aiogram.types import CallbackQuery
import hashlib
import os

@loader.tds
class SudoManager(loader.Module):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä sudo-–ø–∞—Ä–æ–ª–µ–π —Å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"""
    strings = {
        "name": "SudoManager",
        "pass_set": "üîê <b>Sudo-–ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>",
        "pass_required": "üõ°Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è sudo-–ø–∞—Ä–æ–ª—å:</b>",
        "pass_hidden": "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢",
        "button_show": "üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å",
        "button_hide": "üëÅÔ∏è –°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å",
        "wrong_pass": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "sudo_password_hash",
            None,
            "–•–µ—à sudo-–ø–∞—Ä–æ–ª—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)",
            validator=loader.validators.Hidden(),
        )
        self.salt = None

    async def client_ready(self, client, db):
        self._client = client
        if not self.salt:
            self.salt = os.urandom(32)
            self.config["sudo_password_hash"] = None

    @loader.command()
    async def setsudopass(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π sudo-–ø–∞—Ä–æ–ª—å"""
        password = await get_password(
            message, 
            "üîí <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π sudo-–ø–∞—Ä–æ–ª—å:</b>", 
            confirm=True
        )
        self.config["sudo_password_hash"] = self._hash_password(password)
        await utils.answer(message, self.strings("pass_set"))

    @loader.watcher()
    async def terminal_watcher(self, message: Message):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ sudo –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        if "sudo" in message.raw_text and "[sudo] password" in message.raw_text:
            await self._handle_sudo_request(message)

    async def _handle_sudo_request(self, message: Message):
        markup = [
            [{
                "text": self.strings("button_show"),
                "callback": self._toggle_password,
                "args": (message, False)
            }],
            [{
                "text": "‚úÖ –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å",
                "callback": self._submit_password,
                "args": (message,)
            }]
        ]
        
        await utils.answer(
            message,
            self.strings("pass_required") + f"\n\n{self.strings('pass_hidden')}",
            reply_markup=utils.chat_id(message) if len(markup) else None,
            buttons=markup
        )

    async def _toggle_password(self, call: CallbackQuery, message: Message, show: bool):
        text = self.strings("pass_required") + "\n\n"
        text += utils.escape_html(self.config["sudo_password"]) if show else self.strings("pass_hidden")
        
        buttons = [
            [{
                "text": self.strings("button_hide" if show else "button_show"),
                "callback": self._toggle_password,
                "args": (message, not show)
            }],
            [{
                "text": "‚úÖ –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å",
                "callback": self._submit_password,
                "args": (message,)
            }]
        ]
        
        await call.edit_message_text(
            text,
            reply_markup=self._client.build_reply_markup(buttons)
        )

    async def _submit_password(self, call: CallbackQuery, message: Message):
        if self.config["sudo_password_hash"]:
            await self._client.send_message(
                utils.get_chat_id(message),
                f"{self.config['sudo_password']}\n",
                reply_to=message.id
            )
            await call.delete()
        else:
            await call.answer(self.strings("wrong_pass"), show_alert=True)

    def _hash_password(self, password: str) -> str:
        return hashlib.pbkdf2_hmac(
            'sha256',
            password.encode(),
            self.salt,
            100000
        ).hex()

    def _verify_password(self, password: str) -> bool:
        new_hash = self._hash_password(password)
        return new_hash == self.config["sudo_password_hash"]